dnl Process this file with autoconf to produce a configure script.
AC_INIT([jfbterm],[FreeBSD-0.6.1],[babayaga1@y8.dion.ne.jp])
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(jfbterm, 0.6.1)
AC_CONFIG_SRCDIR(acconfig.h)

dnl Checks for programs.
AC_PROG_CC
if test x$CC = xgcc; then
  CFLAGS="$CFLAGS -Wimplicit -Wreturn-type -Wunused -Wswitch -Wcomment -Wtrigraphs -Wformat -Wchar-subscripts -Wuninitialized -Wparentheses -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align"
fi
AC_PROG_INSTALL

# Checks for libraries.
AC_CHECK_LIB([util], [openpty,login_tty])
system=`uname -s`
machine=`uname -m`
case $system in
FreeBSD|OpenBSD)
  AC_CHECK_LIB([iconv], [libiconv,libiconv_open,libiconv_close,locale_charset])
  ;;
NetBSD)
  if test x$machine = xi386; then
    AC_CHECK_LIB([i386], [i386_set_mtrr])
  fi
  if test x$machine = xx86_64; then
    AC_CHECK_LIB([x86_64], [x86_64_set_mtrr])
  fi
  ;;
esac

case $system in
Linux|FreeBSD|NetBSD)
  PKG_CHECK_MODULES(LIBPNG, libpng12 >= 1.2.0, have_libpng=true, have_libpng=false)
  ;;
OpenBSD)
  PKG_CHECK_MODULES(LIBPNG, libpng >= 1.2.0, have_libpng=true, have_libpng=false)
  ;;
esac

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([fcntl.h langinfo.h locale.h paths.h stdlib.h string.h sys/ioctl.h sys/param.h sys/time.h termios.h unistd.h utmp.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_TYPE_UID_T
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
dnl AC_TYPE_SSIZE_T
AC_CHECK_MEMBERS([struct stat.st_rdev])
AC_CHECK_DECLS([sys_siglist])
AC_HEADER_TIME
dnl AC_TYPE_UINT16_T
dnl AC_TYPE_UINT32_T
dnl AC_TYPE_UINT8_T

# Checks for library functions.
AC_FUNC_FORK
AC_PROG_GCC_TRADITIONAL
AC_HEADER_MAJOR
AC_FUNC_MALLOC
AC_FUNC_MMAP
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_CHECK_FUNCS([atexit bzero dup2 gettimeofday memmove memset munmap nl_langinfo select setenv setlocale strcasecmp strchr strdup strerror strncasecmp strstr strtol strtoul])

dnl setup options.
AC_PATH_PROGS(gunzip_path, gunzip, :)
if test x$gunzip_path = x":"; then
  AC_MSG_ERROR(Test for gunzip failed. Please install gunzip program.)
else
  AC_DEFINE_UNQUOTED(GUNZIP_PATH, "${gunzip_path}")
fi

AC_ARG_ENABLE(debug, [  --enable-debug          turn on debugging (default=no)],,enable_debug=no)
AC_MSG_CHECKING(whether to enable debugging)
if test x$enable_debug = xyes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(DEBUG)
else
  AC_MSG_RESULT(no)
fi

AC_ARG_ENABLE(utf8, [  --enable-utf8           support UTF-8 (default=yes)],,enable_utf8=yes)
AC_MSG_CHECKING(whether to enable utf8)
if test x$enable_utf8 = xyes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ENABLE_UTF8)
else
  AC_MSG_RESULT(no)
fi

AC_ARG_ENABLE(other-coding-system, [  --enable-other-coding-system  support other-coding-system (default=yes)],,enable_other=$enable_utf8)
AC_MSG_CHECKING(whether to enable other coding system)
if test x$enable_utf8 = xyes -a x$enable_other = xyes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ENABLE_OTHER_CODING_SYSTEM)
else
  AC_MSG_RESULT(no)
fi

AC_ARG_ENABLE(vga16fb, [  --enable-vga16fb        support vga16fb (default=yes)],,enable_vga16fb=yes)
AC_MSG_CHECKING(whether to enable vga16fb)
if test x$enable_vga16fb = xyes; then
  AC_MSG_RESULT(yes)
  case $system in
  Linux|FreeBSD)
    case $machine in
    i?86|x86_64)
      AC_DEFINE(ENABLE_VGA16FB)
      ;;
    *)
      AC_MSG_WARN([ i386 and x86_64 only, disable vga16fb support])
      enable_vga16fb=no
      ;;
    esac
    ;;
  *)
    AC_MSG_WARN([ Linux and FreeBSD only, disable vga16fb support])
    enable_vga16fb=no
    ;;
  esac
else
   AC_MSG_RESULT(no)
fi

AC_ARG_ENABLE(8bpp, [  --enable-8bpp           support 8bpp (default=yes)],,enable_8bpp=yes)
AC_MSG_CHECKING(whether to enable 8bpp)
if test x$enable_8bpp = xyes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ENABLE_8BPP)
else
  AC_MSG_RESULT(no)
fi

AC_ARG_ENABLE(15bpp, [  --enable-15bpp          support 15bpp (default=yes)],,enable_15bpp=yes)
AC_MSG_CHECKING(whether to enable 15bpp)
if test x$enable_15bpp = xyes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ENABLE_15BPP)
else
  AC_MSG_RESULT(no)
fi

AC_ARG_ENABLE(16bpp, [  --enable-16bpp          support 16bpp (default=yes)],,enable_16bpp=yes)
AC_MSG_CHECKING(whether to enable 16bpp)
if test x$enable_16bpp = xyes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ENABLE_16BPP)
else
  AC_MSG_RESULT(no)
fi

AC_ARG_ENABLE(24bpp, [  --enable-24bpp          support 24bpp (default=yes)],,enable_24bpp=yes)
AC_MSG_CHECKING(whether to enable 24bpp)
if test x$enable_24bpp = xyes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ENABLE_24BPP)
else
  AC_MSG_RESULT(no)
fi

AC_ARG_ENABLE(32bpp, [  --enable-32bpp          support 32bpp (default=yes)],,enable_32bpp=yes)
AC_MSG_CHECKING(whether to enable 32bpp)
if test x$enable_32bpp = xyes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ENABLE_32BPP)
else
  AC_MSG_RESULT(no)
fi

AC_ARG_ENABLE(splash, [  --enable-splash         Enable splash screen (default=yes)],,enable_splash=yes)
AC_MSG_CHECKING(whether to enable splash)
if test x$enable_splash = xyes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ENABLE_SPLASH_SCREEN)
else
  AC_MSG_RESULT(no)
fi

AC_ARG_ENABLE(256-color, [  --enable-256-color      Enable 256 color (default=yes)],,enable_256_color=yes)
AC_MSG_CHECKING(whether to 256 color)
if test x$enable_256_color = xyes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ENABLE_256_COLOR)
else
  AC_MSG_RESULT(no)
fi

if test x$sysconfdir = 'x${prefix}/etc'; then
  if test x$prefix = xNONE; then
    AC_DEFINE_UNQUOTED(SYSCONFDIR, "/etc")
  else
    AC_DEFINE_UNQUOTED(SYSCONFDIR, "${prefix}/etc")
  fi
else
  AC_DEFINE_UNQUOTED(SYSCONFDIR, "${sysconfdir}")
fi

AC_ARG_WITH(libpng, [  --with-libpng           Enable splash libpng support (default=yes)],,with_png=yes)
AC_MSG_CHECKING(whether to use splash png support)
if test x$have_libpng = xtrue && test x$with_png = xyes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(WITH_LIBPNG)
  AC_SUBST(LIBPNG_CFLAGS)
  AC_SUBST(LIBPNG_LIBS)
else
  AC_MSG_RESULT(no)
fi

AC_CONFIG_FILES([Makefile])
AC_OUTPUT

